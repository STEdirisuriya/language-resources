# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Sinhala address parser. This will handle building numbers.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

# Handle the building number part of address such as "අංක 210/12". This number
# would otherwise be classified as a fraction.
export ADDRESS_NUMBER = Optimize[
  universal_func.InvertMarkup[universal_rules.address] universal_rules.ins_space
  universal_rules.clear_space_star
  universal_func.InvertMarkup[universal_rules.opening_brace]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.address_thoroughfare]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.opening_brace]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.address_premises]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.quote]
  universal_rules.clear_space_star
  ("num" |"අංක" | "නො.")
  universal_rules.clear_space_star
  universal_func.InvertMarkup[universal_rules.quote]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.address_number]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.quote]
  (universal_rules.kDigit+ universal_rules.kAlpha?)
  ("/"
   (universal_rules.kAlpha |    # This will handle i.e 123/A and 123/1.
    (universal_rules.kDigit+ universal_rules.kAlpha?)))*
  universal_func.InvertMarkup[universal_rules.quote]
  universal_rules.one_space
  universal_func.InvertMarkup[universal_rules.closing_brace]
  universal_rules.one_space
  universal_func.InvertMarkup[universal_rules.closing_brace]
];
export CLEAN_SPACES = universal_rules.CLEAN_SPACES;
export ADDRESS_MARKUP = Optimize[ADDRESS_NUMBER @ CLEAN_SPACES];
