# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Sinhala address parser. This will handle building numbers.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

export kBytes = Optimize[
  "[1]" |   "[2]" |   "[3]" |   "[4]" |   "[5]" |   "[6]" |   "[7]" |   "[8]" |   "[9]" |  "[10]" |
 "[11]" |  "[12]" |  "[13]" |  "[14]" |  "[15]" |  "[16]" |  "[17]" |  "[18]" |  "[19]" |  "[20]" |
 "[21]" |  "[22]" |  "[23]" |  "[24]" |  "[25]" |  "[26]" |  "[27]" |  "[28]" |  "[29]" |  "[30]" |
 "[31]" |  "[32]" |  "[33]" |  "[34]" |  "[35]" |  "[36]" |  "[37]" |  "[38]" |  "[39]" |  "[40]" |
 "[41]" |  "[42]" |  "[43]" |  "[44]" |  "[45]" |  "[46]" |  "[47]" |  "[48]" |  "[49]" |  "[50]" |
 "[51]" |  "[52]" |  "[53]" |  "[54]" |  "[55]" |  "[56]" |  "[57]" |  "[58]" |  "[59]" |  "[60]" |
 "[61]" |  "[62]" |  "[63]" |  "[64]" |  "[65]" |  "[66]" |  "[67]" |  "[68]" |  "[69]" |  "[70]" |
 "[71]" |  "[72]" |  "[73]" |  "[74]" |  "[75]" |  "[76]" |  "[77]" |  "[78]" |  "[79]" |  "[80]" |
 "[81]" |  "[82]" |  "[83]" |  "[84]" |  "[85]" |  "[86]" |  "[87]" |  "[88]" |  "[89]" |  "[90]" |
 "[91]" |  "[92]" |  "[93]" |  "[94]" |  "[95]" |  "[96]" |  "[97]" |  "[98]" |  "[99]" | "[100]" |
"[101]" | "[102]" | "[103]" | "[104]" | "[105]" | "[106]" | "[107]" | "[108]" | "[109]" | "[110]" |
"[111]" | "[112]" | "[113]" | "[114]" | "[115]" | "[116]" | "[117]" | "[118]" | "[119]" | "[120]" |
"[121]" | "[122]" | "[123]" | "[124]" | "[125]" | "[126]" | "[127]" | "[128]" | "[129]" | "[130]" |
"[131]" | "[132]" | "[133]" | "[134]" | "[135]" | "[136]" | "[137]" | "[138]" | "[139]" | "[140]" |
"[141]" | "[142]" | "[143]" | "[144]" | "[145]" | "[146]" | "[147]" | "[148]" | "[149]" | "[150]" |
"[151]" | "[152]" | "[153]" | "[154]" | "[155]" | "[156]" | "[157]" | "[158]" | "[159]" | "[160]" |
"[161]" | "[162]" | "[163]" | "[164]" | "[165]" | "[166]" | "[167]" | "[168]" | "[169]" | "[170]" |
"[171]" | "[172]" | "[173]" | "[174]" | "[175]" | "[176]" | "[177]" | "[178]" | "[179]" | "[180]" |
"[181]" | "[182]" | "[183]" | "[184]" | "[185]" | "[186]" | "[187]" | "[188]" | "[189]" | "[190]" |
"[191]" | "[192]" | "[193]" | "[194]" | "[195]" | "[196]" | "[197]" | "[198]" | "[199]" | "[200]" |
"[201]" | "[202]" | "[203]" | "[204]" | "[205]" | "[206]" | "[207]" | "[208]" | "[209]" | "[210]" |
"[211]" | "[212]" | "[213]" | "[214]" | "[215]" | "[216]" | "[217]" | "[218]" | "[219]" | "[220]" |
"[221]" | "[222]" | "[223]" | "[224]" | "[225]" | "[226]" | "[227]" | "[228]" | "[229]" | "[230]" |
"[231]" | "[232]" | "[233]" | "[234]" | "[235]" | "[236]" | "[237]" | "[238]" | "[239]" | "[240]" |
"[241]" | "[242]" | "[243]" | "[244]" | "[245]" | "[246]" | "[247]" | "[248]" | "[249]" | "[250]" |
"[251]" | "[252]" | "[253]" | "[254]" | "[255]"
];

export kDigit = Optimize[
    "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
];

export kSpace = Optimize[
    " " | "\t" | "\n" | "\r"
];

export kNotSpace = Optimize[kBytes - kSpace];
export pass_any_word = kNotSpace+;
export clear_space_star = kSpace* : "";
export CLEAN_SPACES = Optimize[ "" | (clear_space_star
        (pass_any_word (kSpace+ : " "))*
        pass_any_word clear_space_star)
];


# Handle the building number part of address such as "අංක 210/12". This number
# would otherwise be classified as a fraction.
export ADDRESS_NUMBER = Optimize[
  universal_func.InvertMarkup[universal_rules.address] universal_rules.ins_space
  universal_rules.clear_space_star
  universal_func.InvertMarkup[universal_rules.opening_brace]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.address_thoroughfare]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.opening_brace]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.address_premises]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.quote]
  universal_rules.clear_space_star
  ("num" |"අංක" | "නො.")
  universal_rules.clear_space_star
  universal_func.InvertMarkup[universal_rules.quote]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.address_number]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.quote]
  (universal_rules.kDigit+ universal_rules.kAlpha?)
  ("/"
   (universal_rules.kAlpha |    # This will handle i.e 123/A and 123/1.
    (universal_rules.kDigit+ universal_rules.kAlpha?)))*
  universal_func.InvertMarkup[universal_rules.quote]
  universal_rules.one_space
  universal_func.InvertMarkup[universal_rules.closing_brace]
  universal_rules.one_space
  universal_func.InvertMarkup[universal_rules.closing_brace]
];

export ADDRESS_MARKUP = Optimize[ADDRESS_NUMBER @ CLEAN_SPACES];
